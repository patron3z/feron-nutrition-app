{"fsPath":"\\home\\user\\workspace\\src\\components\\GeminiTestComponent.tsx","fileUuid":"c8d18e4a-8071-4a4c-928f-5963bbca8ede","fileSizeBytes":3587,"numLines":110,"diffChanges":[{"originalStartLineNumberOneIndexed":1,"originalEndLineNumberExclusiveOneIndexed":1,"modifiedStartLineNumberOneIndexed":1,"modifiedEndLineNumberExclusiveOneIndexed":111,"addedLines":["import React, { useState } from 'react';","import { View, Text, Pressable, ScrollView, Alert } from 'react-native';","import { generateContent } from '../api/gemini';","","/**"," * Composant de test pour v√©rifier que Gemini fonctionne dans l'app"," * √Ä utiliser temporairement pour d√©boguer"," */","export default function GeminiTestComponent() {","  const [result, setResult] = useState<string>('');","  const [loading, setLoading] = useState(false);","","  const testBasicGemini = async () => {","    setLoading(true);","    setResult('');","    ","    try {","      console.log('üß™ Test basique Gemini...');","      const response = await generateContent('Bonjour, peux-tu me r√©pondre en fran√ßais?');","      console.log('‚úÖ R√©ponse Gemini:', response);","      setResult(`‚úÖ SUCCESS: ${response}`);","      Alert.alert('Success', 'Gemini fonctionne!');","    } catch (error) {","      console.error('‚ùå Erreur Gemini:', error);","      setResult(`‚ùå ERROR: ${error.message}`);","      Alert.alert('Error', `Gemini ne fonctionne pas: ${error.message}`);","    } finally {","      setLoading(false);","    }","  };","","  const testFoodIdentification = async () => {","    setLoading(true);","    setResult('');","    ","    try {","      console.log('üçΩÔ∏è Test identification aliments...');","      const foodPrompt = `Identify foods in: \"Pizza margherita with salad\"","","IMPORTANT: Respond ONLY with food lines in this EXACT format:","FOOD_NAME | SCALE_FACTOR | REASONING","","Rules:","- Use simple food names (no asterisks, parentheses, or formatting)","- Scale: 1.0 = standard serving","- Do NOT include headers, separators, or explanatory text","","Examples:","Pizza margherita | 1.0 | Standard serving","Salad | 1.0 | Side portion`;","","      const response = await generateContent(foodPrompt);","      console.log('‚úÖ Food identification:', response);","      ","      // Parser comme dans nutrition-ai.ts","      const lines = response.split('\\n')","        .map(l => l.trim())","        .filter(l => l && l.includes('|'));","      ","      console.log('üìä Lignes pars√©es:', lines);","      setResult(`‚úÖ FOOD IDENTIFICATION SUCCESS:\\n${response}\\n\\nParsed lines: ${lines.length}`);","      Alert.alert('Success', `${lines.length} aliments d√©tect√©s!`);","    } catch (error) {","      console.error('‚ùå Erreur food identification:', error);","      setResult(`‚ùå FOOD ERROR: ${error.message}`);","      Alert.alert('Error', `Food identification failed: ${error.message}`);","    } finally {","      setLoading(false);","    }","  };","","  return (","    <View className=\"p-4 bg-white border border-gray-200 rounded-lg m-4\">","      <Text className=\"text-lg font-bold mb-4\">üß™ Gemini Test Component</Text>","      ","      <View className=\"flex-row gap-2 mb-4\">","        <Pressable","          className=\"bg-blue-500 px-4 py-2 rounded flex-1\"","          onPress={testBasicGemini}","          disabled={loading}","        >","          <Text className=\"text-white text-center font-medium\">","            {loading ? 'Testing...' : 'Test Basic'}","          </Text>","        </Pressable>","        ","        <Pressable","          className=\"bg-green-500 px-4 py-2 rounded flex-1\"","          onPress={testFoodIdentification}","          disabled={loading}","        >","          <Text className=\"text-white text-center font-medium\">","            {loading ? 'Testing...' : 'Test Food ID'}","          </Text>","        </Pressable>","      </View>","","      {result && (","        <ScrollView className=\"bg-gray-100 p-3 rounded max-h-40\">","          <Text className=\"text-xs font-mono\">{result}</Text>","        </ScrollView>","      )}","      ","      <Text className=\"text-xs text-gray-500 mt-2\">","        V√©rifiez la console pour les logs d√©taill√©s","      </Text>","    </View>","  );","}",""],"tokenizedAddedLines":[1000000,1000001,1000002,1000003,1000004,1000005,1000006,1000007,1000008,1000009,1000010,1000003,1000011,1000012,1000013,1000014,1000015,1000016,1000017,1000018,1000019,1000020,1000021,1000022,1000023,1000024,1000025,1000026,1000027,1000028,1000003,1000029,1000012,1000013,1000014,1000015,1000030,1000031,1000003,1000032,1000033,1000003,1000034,1000035,1000036,1000037,1000003,1000038,1000039,1000040,1000003,1000041,1000042,1000043,1000044,1000045,1000046,1000047,1000043,1000048,1000049,1000050,1000021,1000051,1000052,1000053,1000025,1000026,1000027,1000028,1000003,1000054,1000055,1000056,1000043,1000057,1000058,1000059,1000060,1000061,1000062,1000063,1000064,1000065,1000066,1000067,1000058,1000068,1000069,1000061,1000062,1000063,1000070,1000065,1000066,1000071,1000003,1000072,1000073,1000074,1000075,1000076,1000043,1000077,1000078,1000079,1000080,1000081,1000082,1000003]}],"gitInfo":{"noRepoFound":true},"kind":"KIND_ADDED"}